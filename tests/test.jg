#!/usr/bin/env jaeger

# `start` directive tells compiler which function is entry point.
/start main/
# `import` directive put code from file into program.
/import "std.jg"/

# function called at program startup.
# it must return integer value which is exit code (0 means success).
[main Int
	# `let` directive declares function local storage.
	# be aware that those objects are nullified,
	# so you have to create and assign objects to them before they will be used.
	/let
		<a Int>
		<b Float>
		<c String>
		<d Bool>
		<pathFrom String>
		<pathTo String>
		<content String>
		/

	# `set` directive assigns value or function result to local variable.
	/set a 1/
	/set b 2.3/
	/set c "4"/
	/set d true/
	/set pathFrom "../../Jaeger/tests/Person.jg"/
	/set pathTo "../../Jaeger/tests/Person2.jg"/
	/set content (fileGetContents pathFrom)/

	# this mysterious `&` character is used as arguments delimiter.
	# that means tou can call the same function multiple times
	# with different set of parameters.
	# in this case `roarLine` function is overloaded so it can print atom values.
	(roarLine
		"Hello World!" &
		a &
		b &
		c &
		d &
		(concat "Jaeger" "Works!") &
		(concat "File path: " pathFrom) &
		"File content:" &
		content
		)

	/if true then (roar "true") else (roar "false")/
	###(roar "Do you want to write a file? [true/false]: ")
	/if (toBool (steal)) then
		(fileSetContents pathTo content)
		(roarLine "Done!")
	else
		(roarLine "Ok!")
		/###

	# the very last expression is used as function result value.
	(add a 5)
]
