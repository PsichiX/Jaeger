#!/usr/bin/env jaeger

# `start` directive tells compiler which function is entry point.
/start main/

# `import` directive put code from file into program.
/import "std.jg"/

# template is a set of code that can be implemented by replacing `?{N}`
# sequences with types used in template implementation.
# templates are the best choice for making arrays, and other containers.
[<template Temp
	{Temp?{0}
		<value ?{0}>
	}

	[Temp?{0} Temp?{0} <v ?{0}>
		/let <this Temp?{0}>/
		/set this (Temp?{0})/
		/set this.value v/
		this
	]

	[add Temp?{0} <a Temp?{0}> <b Temp?{0}>
		(Temp?{0} (add a.value b.value))
	]
>]

# here Temp template will be implemented for Int type so TempInt structure
# will be exposed.
[<implement Temp Int>]

# coroutine is just a function with YIELD directive in it.
# YIELD directive tells compiler to pause function execution in that place,
# and resume it when application is not busy.
# If we yield another coroutine, then current coroutine will not continue
# until coroutine that we wait for will complete.
[countdown <v Int>
	/while (greater v 0) then [
		(roar "Countdown: " & v & "\n")
		/set v (sub v 1)/
		/yield (waitForMilliseconds 1000)/
	]/
	(roarLine "Kaboom!")
]

[waitForMilliseconds <ms Int>
	/let <start Int>/
	/set start (currentTimeSteadyMS)/
	/while (greater ms (sub (currentTimeSteadyMS) start)) then [
		/yield/
	]/
]

# function called at program startup.
# it must return integer value which is exit code (0 means success).
[main Int
	(loadResourcesProtocol "file" "I4Protocol_file")
	# `let` directive declares function local storage.
	# be aware that those objects are nullified,
	# so you have to create and assign objects to them before they will be used.
	/let
		<time Int>
		<a Int>
		<b Float>
		<c String>
		<d Bool>
		<pathFrom String>
		<pathTo String>
		<content String>
		/

	/set time (currentTimeSteadyMS)/
	# `set` directive assigns value or function result to local variable.
	/set a 1/
	/set b 2.3/
	/set c "4"/
	/set d true/
	/set pathFrom "Person.jg"/
	/set pathTo "Person2.jg"/
	/set content (fileReadContents pathFrom "app")/

	# this mysterious `&` character is used as arguments delimiter.
	# that means tou can call the same function multiple times
	# with different set of parameters.
	# in this case `roarLine` function is overloaded so it can print atom values.
	(roarLine
		"Hello World!" &
		a &
		b &
		c &
		d &
		(add "Jaeger" "Works!") &
		(add "File path: " pathFrom) &
		"File content:" &
		content
		)
	(fileWriteContents pathTo "app" content)

	# compiler will optimize obvious checks so there will be just roarLine call.
	/if true then [
		(roarLine "true")
	] else [
		(roarLine "false")
	]/

	/if (less a 1) then [
		(roarLine "a is less than 1!")
	] elif (greater a 1) then [
		(roarLine "a is greater than 1!")
	] elif (equals a 1) then [
		(roarLine "a equals 1!")
	] else [
		(roarLine "WTF!")
	]/

	(countdown 5)
	(roar "Main completed in: " & (sub (currentTimeSteadyMS) time) & "ms!\n")

	/let <temp TempInt>/
	/set temp (add (TempInt -5) (TempInt 5))/

	# the very last expression is used as function result value.
	temp.value
]
